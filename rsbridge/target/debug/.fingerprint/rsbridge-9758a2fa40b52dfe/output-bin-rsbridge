{"message":"cannot find value `result` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1307,"byte_end":1313,"line_start":39,"line_end":39,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    result;","highlight_start":5,"highlight_end":11}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `result` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    result;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"`await` is only allowed inside `async` functions and blocks","code":{"code":"E0728","explanation":"[`await`] has been used outside [`async`] function or block.\n\nErroneous code examples:\n\n```edition2018,compile_fail,E0728\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nfn foo() {\n    wake_and_yield_once().await // `await` is used outside `async` context\n}\n```\n\n[`await`] is used to suspend the current computation until the given\nfuture is ready to produce a value. So it is legal only within\nan [`async`] context, like an `async fn` or an `async` block.\n\n```edition2018\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nasync fn foo() {\n    wake_and_yield_once().await // `await` is used within `async` function\n}\n\nfn bar(x: u8) -> impl Future<Output = u8> {\n    async move {\n        wake_and_yield_once().await; // `await` is used within `async` block\n        x\n    }\n}\n```\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n[`await`]: https://doc.rust-lang.org/std/keyword.await.html\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":354,"byte_end":415,"line_start":13,"line_end":13,"column_start":21,"column_end":82,"is_primary":true,"text":[{"text":"    let transport = web3::transports::WebSocket::new(\"ws://localhost:8546\").await?;","highlight_start":21,"highlight_end":82}],"label":"only allowed inside `async` functions and blocks","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":229,"byte_end":233,"line_start":11,"line_end":11,"column_start":4,"column_end":8,"is_primary":false,"text":[{"text":"fn main() {","highlight_start":4,"highlight_end":8}],"label":"this is not `async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0728]\u001b[0m\u001b[0m\u001b[1m: `await` is only allowed inside `async` functions and blocks\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn main() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is not `async`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    // let (_eloop, transport) = web3::transports::Http::new(\"http://localhost:8545\").unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let transport = web3::transports::WebSocket::new(\"ws://localhost:8546\").await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9monly allowed inside `async` functions and blocks\u001b[0m\n\n"}
{"message":"unused import: `web3::futures::Future`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":102,"byte_end":123,"line_start":6,"line_end":6,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use web3::futures::Future;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":98,"byte_end":124,"line_start":6,"line_end":6,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use web3::futures::Future;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `web3::futures::Future`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse web3::futures::Future;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":354,"byte_end":416,"line_start":13,"line_end":13,"column_start":21,"column_end":83,"is_primary":true,"text":[{"text":"    let transport = web3::transports::WebSocket::new(\"ws://localhost:8546\").await?;","highlight_start":21,"highlight_end":83}],"label":"cannot use the `?` operator in a function that returns `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":354,"byte_end":416,"line_start":13,"line_end":13,"column_start":21,"column_end":83,"is_primary":false,"text":[{"text":"    let transport = web3::transports::WebSocket::new(\"ws://localhost:8546\").await?;","highlight_start":21,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":226,"byte_end":1316,"line_start":11,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"fn main() {","highlight_start":1,"highlight_end":12},{"text":"    // let (_eloop, transport) = web3::transports::Http::new(\"http://localhost:8545\").unwrap();","highlight_start":1,"highlight_end":96},{"text":"    let transport = web3::transports::WebSocket::new(\"ws://localhost:8546\").await?;","highlight_start":1,"highlight_end":84},{"text":"    let web3 = web3::Web3::new(transport);","highlight_start":1,"highlight_end":43},{"text":"    let accounts = web3.eth().accounts().wait().unwrap();","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let balance_before = web3.eth().balance(accounts[1], None).wait().unwrap();","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let nonce = web3.eth().transaction_count(accounts[0], None).wait().unwrap();","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let tx = RawTransaction {","highlight_start":1,"highlight_end":30},{"text":"        nonce: convert_u256(nonce),","highlight_start":1,"highlight_end":36},{"text":"        to: Some(convert_account(accounts[1])),","highlight_start":1,"highlight_end":48},{"text":"        value: U256::from(10000),","highlight_start":1,"highlight_end":34},{"text":"        gas_price: U256::from(1000000000),","highlight_start":1,"highlight_end":43},{"text":"        gas: U256::from(21000),","highlight_start":1,"highlight_end":32},{"text":"        data: Vec::new()","highlight_start":1,"highlight_end":25},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let signed_tx = tx.sign(&get_private_key());","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let tx_hash = web3.eth().send_raw_transaction(Bytes::from(signed_tx)).wait().unwrap();","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let balance_after = web3.eth().balance(accounts[1], None).wait().unwrap();","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"TX Hash: {:?}\", tx_hash);","highlight_start":1,"highlight_end":40},{"text":"    println!(\"Balance before: {}\", balance_before);","highlight_start":1,"highlight_end":52},{"text":"    println!(\"Balance after: {}\", balance_after);","highlight_start":1,"highlight_end":50},{"text":"    result;","highlight_start":1,"highlight_end":12},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::Try` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `std::ops::Try::from_error`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn main() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // let (_eloop, transport) = web3::transports::Http::new(\"http://localhost:8545\").unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let transport = web3::transports::WebSocket::new(\"ws://localhost:8546\").await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in a function that returns `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let web3 = web3::Web3::new(transport);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    result;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::ops::Try` is not implemented for `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::ops::Try::from_error`\u001b[0m\n\n"}
{"message":"no method named `wait` found for struct `web3::helpers::CallFuture<std::vec::Vec<ethereum_types::H160>, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":502,"byte_end":506,"line_start":15,"line_end":15,"column_start":42,"column_end":46,"is_primary":true,"text":[{"text":"    let accounts = web3.eth().accounts().wait().unwrap();","highlight_start":42,"highlight_end":46}],"label":"method not found in `web3::helpers::CallFuture<std::vec::Vec<ethereum_types::H160>, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `wait` found for struct `web3::helpers::CallFuture<std::vec::Vec<ethereum_types::H160>, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:15:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let accounts = web3.eth().accounts().wait().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `web3::helpers::CallFuture<std::vec::Vec<ethereum_types::H160>, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`\u001b[0m\n\n"}
{"message":"no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":583,"byte_end":587,"line_start":17,"line_end":17,"column_start":64,"column_end":68,"is_primary":true,"text":[{"text":"    let balance_before = web3.eth().balance(accounts[1], None).wait().unwrap();","highlight_start":64,"highlight_end":68}],"label":"method not found in `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let balance_before = web3.eth().balance(accounts[1], None).wait().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`\u001b[0m\n\n"}
{"message":"no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":665,"byte_end":669,"line_start":19,"line_end":19,"column_start":65,"column_end":69,"is_primary":true,"text":[{"text":"    let nonce = web3.eth().transaction_count(accounts[0], None).wait().unwrap();","highlight_start":65,"highlight_end":69}],"label":"method not found in `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:19:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let nonce = web3.eth().transaction_count(accounts[0], None).wait().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`\u001b[0m\n\n"}
{"message":"this function takes 2 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":967,"byte_end":985,"line_start":30,"line_end":30,"column_start":29,"column_end":47,"is_primary":false,"text":[{"text":"    let signed_tx = tx.sign(&get_private_key());","highlight_start":29,"highlight_end":47}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":962,"byte_end":966,"line_start":30,"line_end":30,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    let signed_tx = tx.sign(&get_private_key());","highlight_start":24,"highlight_end":28}],"label":"expected 2 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 2 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:30:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let signed_tx = tx.sign(&get_private_key());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 2 arguments\u001b[0m\n\n"}
{"message":"no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::H256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1063,"byte_end":1067,"line_start":32,"line_end":32,"column_start":75,"column_end":79,"is_primary":true,"text":[{"text":"    let tx_hash = web3.eth().send_raw_transaction(Bytes::from(signed_tx)).wait().unwrap();","highlight_start":75,"highlight_end":79}],"label":"method not found in `web3::helpers::CallFuture<ethereum_types::H256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::H256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:32:75\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let tx_hash = web3.eth().send_raw_transaction(Bytes::from(signed_tx)).wait().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `web3::helpers::CallFuture<ethereum_types::H256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`\u001b[0m\n\n"}
{"message":"no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1143,"byte_end":1147,"line_start":34,"line_end":34,"column_start":63,"column_end":67,"is_primary":true,"text":[{"text":"    let balance_after = web3.eth().balance(accounts[1], None).wait().unwrap();","highlight_start":63,"highlight_end":67}],"label":"method not found in `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `wait` found for struct `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:34:63\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let balance_after = web3.eth().balance(accounts[1], None).wait().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `web3::helpers::CallFuture<ethereum_types::U256, web3::transports::ws::Response<serde_json::value::Value, fn(std::result::Result<std::vec::Vec<std::result::Result<serde_json::value::Value, web3::Error>>, web3::Error>) -> std::result::Result<serde_json::value::Value, web3::Error>>>`\u001b[0m\n\n"}
{"message":"aborting due to 9 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 9 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0277, E0425, E0599, E0728.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0425, E0599, E0728.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
